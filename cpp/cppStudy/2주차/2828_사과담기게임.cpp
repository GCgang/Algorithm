// https://www.acmicpc.net/problem/2828
/*
문제:
N칸으로 나누어지는 스크린이 있다.
스크린의 아래쪽에는 M칸을 차지하는 바구니가 있다. (M < N)
플레이어는 게임 중 바구니를 왼쪽,오른쪽으로 이동할 수 있다. 단, 스크린 경계를 넘으면 안된다.
가장 처음에 바구니는 왼쪽 M칸을 차지하고 있다.
스크린의 위에서 사과 여러 개가 떨어진다.
각 사과는 N칸중 한 칸의 상단에서 떨어지기 시작하며, 스크린의 바닥에 닿을때까지 직선으로 떨어진다.
한 사과가 바닥에 닿는 즉시, 다른 사과가 떨어지기 시작한다
바구니가 사과가 떨어지는 칸을 차지하고 있다면, 바구니는 그 사과가 바닥에 닿을 떄, 사과를 담을 수 있다.
상근이는 사과를 모두 담으려고 한다. 바구니의 이동 거리의 최솟값을 구하는 프로그램을 작성하시오.

입력:
첫째 줄에 N과 M이 주어진다 (1 <= M <= N <= 10)
둘째 줄에 떨어지는 사과의 개수 J가 주어진다 (1 <= J <= 20)
다음 J개 줄에는 사과가 떨어지는 위치가 순서대로 주어진다.

출력:
모든 사과를 담기 위해서 바구니가 이동해야 하는 거리의 최솟값을 출력한다

ex:
입력        출력
5 1         6
3
1
5
3
*/
//   o
//     o 
// o
// -----

// --
#include <iostream>
using namespace std;

int main()
{
    int N, M, J, apple, left, right, move = 0;

    cin >> N >> M >> J;

    left = 1;
    right = M;

    for (int i = 0; i < J; ++i)
    {
        int apple;
        cin >> apple;
        
        if (apple < left)
        { 
            // 사과가 바구니 왼쪽에 떨어질 경우
            move += (left - apple); // 바구니를 왼쪽으로 이동
            right -= (left - apple); // 오른쪽도 같이 이동
            left = apple; // 왼쪽 위치 갱신
        }
        else if (apple > right)
        { 
            // 사과가 바구니 오른쪽에 떨어질 경우
            move += (apple - right); // 바구니를 오른쪽으로 이동
            left += (apple - right); // 왼쪽도 같이 이동
            right = apple; // 오른쪽 위치 갱신
        }
        // 사과가 바구니 범위 내에 떨어질 경우 이동할 필요 없음

    }
    cout << move << "\n";
    return 0;
}